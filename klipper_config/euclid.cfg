
# ================
# The 'public' API
# ================

[gcode_macro _user_variables]
variable_dock_safe_x: 100
variable_dock_safe_y: 320
variable_dock_entry_x: 45
variable_dock_entry_y: 340
variable_attach_move_x: 50
variable_dock_move_y: 30
variable_attach_feedrate: 50
variable_dock_feedrate: 75
variable_travel_feedrate: 400
variable_safe_z: 25
variable_z_feedrate: 20
gcode:

# Attach the probe
[gcode_macro PROBE_ATTACH]
gcode:
    {% set goback = params.BACK|default(0) %}

    {% set dock_safe_x = printer["gcode_macro _user_variables"].dock_safe_x %}
    {% set dock_safe_y = printer["gcode_macro _user_variables"].dock_safe_y %}
    {% set dock_entry_x = printer["gcode_macro _user_variables"].dock_entry_x %}
    {% set dock_entry_y = printer["gcode_macro _user_variables"].dock_entry_y %}
    {% set attach_move_x = printer["gcode_macro _user_variables"].attach_move_x %}
    {% set attach_feedrate = printer["gcode_macro _user_variables"].attach_feedrate * 60 %}
    {% set travel_feedrate = printer["gcode_macro _user_variables"].travel_feedrate * 60 %}
    {% set safe_z = printer["gcode_macro _user_variables"].safe_z %}
    {% set z_feedrate = printer["gcode_macro _user_variables"].z_feedrate * 60 %}

    {% set probe_attached = printer["gcode_macro _probe_variables"].probe_attached %}
    {% set probe_locked = printer["gcode_macro _probe_variables"].probe_lock %}

    _entry_point function=PROBE_ATTACH

    {% if not 'xy' in printer.toolhead.homed_axes %}

        { action_raise_error("Must Home X and Y Axis First!") }

    {% elif not probe_attached and not probe_lock %}

        { action_respond_info("Attaching Probe") }

        # Ensure our Z is safe
        {% if not 'z' in printer.toolhead.homed_axes %}
            { action_respond_info("Resetting Z position to zero") }
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        {% if printer.toolhead.position.z < safe_z %}
            G0 Z{safe_z} F{z_feedrate}
        {% endif %}

        _entry_point function=PROBE_ATTACH_internal

        # Get in place to attach the probe
        G0 X{dock_safe_x} Y{dock_safe_y} F{travel_feedrate}
        G0 X{dock_entry_x} Y{dock_entry_y} F{travel_feedrate}
        # Slide into the dock
        G0 X{dock_entry_x|int - attach_move_x|int} F{attach_feedrate}
        # Slide out of the dock
        G0 X{dock_entry_x} F{attach_feedrate}
        G0 X{dock_safe_x} Y{dock_safe_y} F{travel_feedrate}

        _check_probe action=attach

        _exit_point function=PROBE_ATTACH_internal move={goback}

    {% elif probe_lock %}

        { action_respond_info("Probe locked!") }
        _check_probe action=query

    {% else %}

        { action_respond_info("Probe already attached!") }
        _check_probe action=query

    {% endif %}

    _exit_point function=PROBE_ATTACH move={goback}

# Dock the probe
[gcode_macro PROBE_DOCK]
gcode:
    {% set goback = params.BACK|default(0) %}

    {% set dock_safe_x = printer["gcode_macro _user_variables"].dock_safe_x %}
    {% set dock_safe_y = printer["gcode_macro _user_variables"].dock_safe_y %}
    {% set dock_entry_x = printer["gcode_macro _user_variables"].dock_entry_x %}
    {% set dock_entry_y = printer["gcode_macro _user_variables"].dock_entry_y %}
    {% set attach_move_x = printer["gcode_macro _user_variables"].attach_move_x %}
    {% set dock_move_y = printer["gcode_macro _user_variables"].dock_move_y %}
    {% set attach_feedrate = printer["gcode_macro _user_variables"].attach_feedrate * 60 %}
    {% set dock_feedrate = printer["gcode_macro _user_variables"].dock_feedrate * 60 %}
    {% set travel_feedrate = printer["gcode_macro _user_variables"].travel_feedrate * 60 %}
    {% set safe_z = printer["gcode_macro _user_variables"].safe_z %}
    {% set z_feedrate = printer["gcode_macro _user_variables"].z_feedrate * 60 %}

    {% set probe_attached = printer["gcode_macro _probe_variables"].probe_attached %}
    {% set probe_locked = printer["gcode_macro _probe_variables"].probe_lock %}

    _entry_point function=PROBE_DOCK

    {% if not 'xy' in printer.toolhead.homed_axes %}

        { action_raise_error("Must Home X and Y Axis First!") }

    {% elif probe_attached and not probe_lock %}

        { action_respond_info("Docking Probe") }

        # Ensure our Z is safe
        {% if not 'z' in printer.toolhead.homed_axes %}
            { action_respond_info("Resetting Z position to zero") }
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        {% if printer.toolhead.position.z < safe_z %}
            G0 Z{safe_z} F{z_feedrate}
        {% endif %}

        # Get in place to attach the probe
        G0 X{dock_safe_x} Y{dock_safe_y} F{travel_feedrate}
        G0 X{dock_entry_x} Y{dock_entry_y} F{travel_feedrate}
        # Slide into the dock
        G0 X{dock_entry_x|int - attach_move_x|int} F{attach_feedrate}
        # Slide off the dock to stow the probe
        G0 Y{dock_entry_y|int - dock_move_y|int} F{dock_feedrate}
        G0 X{dock_safe_x} Y{dock_safe_y} F{travel_feedrate}

        G4 P1000
        _check_probe action=dock

    {% elif probe_lock %}

        { action_respond_info("Probe locked!") }
        _check_probe action=query

    {% else %}

        { action_respond_info("Probe already docked!") }
        _check_probe action=query

    {% endif %}

    _exit_point function=PROBE_DOCK move={goback}

[gcode_macro PROBE_ATTACH_LOCK]
gcode:
    PROBE_ATTACH
    _probe_lock

[gcode_macro PROBE_DOCK_UNLOCK]
gcode:
    PROBE_DOCK
    _probe_unlock

# =================
# The private 'API'
# =================

[gcode_macro _probe_variables]
variable_probe_state: False
variable_probe_attached: False
variable_probe_lock: False
gcode:
    {% set reset  = params.RESET|default(0) %}
    {% if reset %}
        SET_GCODE_VARIABLE MACRO=_probe_variables VARIABLE=probe_lock VALUE={ 0 }
    {% endif %}

# Our entry/exit macros, copied from Klicky, make it easy to save/restore gcode state
[gcode_macro _entry_point]
gcode:
    {% set function = 'pre_' ~ params.FUNCTION %}
    M400
    SAVE_GCODE_STATE NAME={function}
    G90

[gcode_macro _exit_point]
gcode:
    {% set function = 'pre_' ~ params.FUNCTION %}
    {% set move = params.MOVE|default(0) %}
    M400
    RESTORE_GCODE_STATE NAME={function} MOVE={move}

# Locking / unlocking is a convenient way to chain probe-using macros together to
# avoid lots of attach/dock actions.
[gcode_macro _probe_lock]
gcode:
    SET_GCODE_VARIABLE MACRO=_probe_variables VARIABLE=probe_lock VALUE={ True }

[gcode_macro _probe_unlock]
gcode:
    SET_GCODE_VARIABLE MACRO=_probe_variables VARIABLE=probe_lock VALUE={ False }

# We add in some error checks, mostly copied from klicky. Basically assurance the
# probe is attached when we expect it, along with error reporting.
[gcode_macro _set_probe_state]
gcode:
    {% set query_probe_triggered = printer.probe.last_query %}
    {% set action = params.ACTION|default("") %}

    # If triggered (true), probe not attached. This is becase we assume (or ensure)
    # the probe is not touching the bed.
    {% if query_probe_triggered %}
        SET_GCODE_VARIABLE MACRO=_probe_variables VARIABLE=probe_attached VALUE={ 0 }
    {% else %}
        SET_GCODE_VARIABLE MACRO=_probe_variables VARIABLE=probe_attached VALUE={ 1 }
    {% endif %}

    {% if action == 'query' %}
          SET_GCODE_VARIABLE MACRO=_probe_variables VARIABLE=probe_state VALUE={ query_probe_triggered }
    {% endif %}

    # If not docked
    {% if not query_probe_triggered and action == 'dock' %}
        { action_raise_error("Probe dock failed!") }
    {% endif %}

    # If not attached
    {% if query_probe_triggered and action == 'attach' %}
        { action_raise_error("Probe attach failed!") }
    {% endif %}

[gcode_macro _check_probe]
gcode:
    {% set action=params.ACTION %}
    QUERY_PROBE
    _set_probe_state ACTION={action}

# ====================================================================================
# Override built-in functions that need a probe. We will ensure it's attached first :)
# ====================================================================================

[gcode_macro PROBE_CALIBRATE]
rename_existing: _PROBE_CALIBRATE
gcode:
    _entry_point function=PROBE_CALIBRATE

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    # Protect against PROBE CALIBRATE performed from outside the bed
    #{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
    #      or printer['gcode_move'].position.y < probe_offset_y
    #      or printer['gcode_move'].position.x > (max_x - probe_offset_x)
    #      or printer['gcode_move'].position.x < probe_offset_x %}
    #  { action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED!") }
    #{% endif%}

    _check_probe action=query
    PROBE_ATTACH back=1

    _PROBE_CALIBRATE {% for p in params 
            %}{'%s=%s ' % (p, params[p])}{%
            endfor %}

    PROBE_DOCK back=1

    _exit_point function=PROBE_CALIBRATE move=1

[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
gcode:
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    _entry_point function=PROBE_ACCURACY

    _check_probe action=query
    PROBE_ATTACH back=1

    _PROBE_ACCURACY {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    PROBE_DOCK back=1

    _exit_point function=PROBE_ACCURACY move=1

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    _check_probe action=query
    PROBE_ATTACH 

    _BED_MESH_CALIBRATE {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    PROBE_DOCK

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    _check_probe action=query
    PROBE_ATTACH

    _QUAD_GANTRY_LEVEL {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    PROBE_DOCK

# 
# Homing override
# 
[homing_override]
axes: xyz
gcode:
    {% set travel_feedrate = printer["gcode_macro _user_variables"].travel_feedrate * 60 %}
    {% set safe_z = printer["gcode_macro _user_variables"].safe_z %}
    {% set z_feedrate = printer["gcode_macro _user_variables"].z_feedrate * 60 %}

    {% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
    {% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
    {% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}

    # Home in the middle of the bed
    {% set z_home_position_x = Mx * 0.5 - Ox %}
    {% set z_home_position_y = My * 0.5 - Oy %}

    { action_respond_info("Homing override") }
    _check_probe action=query

    # Figure out which axes we need to home
    {% set home_x, home_y, home_z = False, False, False %}

    {% if 'X' in params %}
        {% set home_x = True %}
    {% endif %}

    {% if 'Y' in params %}
        {% set home_y = True %}
    {% endif %}

    {% if 'Z' in params %}
        {% set home_z = True %}
    {% endif %}

    {% if not home_x and not home_y and not home_z %}
        {% set home_x = True %}
        {% set home_y = True %}
        {% set home_z = True %}
    {% endif %}

    # If we're homing all axes, we'll reset our probe variables
    {% if home_x and home_y and home_z %}
        _probe_variables reset=1
    {% endif %}

    _entry_point function=HOMING_OVERRIDE

    # Ensure our Z is safe
    {% if not 'z' in printer.toolhead.homed_axes %}
        { action_respond_info("Resetting Z position to zero") }
        SET_KINEMATIC_POSITION Z=0
    {% endif %}

    {% if printer.toolhead.position.z < safe_z %}
        G0 Z{safe_z} F{z_feedrate}
    {% endif %}

    {% if home_x %}
        G28 X
    {% endif %}

    {% if home_y %}
        G28 Y
    {% endif %}

    {% if home_z %}
        # If we use the probe as an endstop, we need to attach it.
        {% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
            PROBE_ATTACH
        {% else %}
            PROBE_DOCK
        {% endif %}

        G0 X{z_home_position_x} Y{z_home_position_y} F{travel_feedrate}
        G28 Z
        G0 Z{safe_z} F{z_feedrate}

        # If we use the probe as an endstop, we need to dock it.
        {% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
            PROBE_DOCK
        {% endif %}
    {% endif %}

    _check_probe action=query

    _exit_point function=HOMING_OVERRIDE
